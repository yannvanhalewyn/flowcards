{"version":3,"sources":["remote/model.js","dev/logger.js","logo.svg","Typography.js","flashcard/Overview.js","flashcard/model.js","quiz/model.js","quiz/Questionaire.js","quiz/Quiz.js","App.js","index.js"],"names":["loader","DevLogger","useRecoilTransactionObserver_UNSTABLE","snapshot","changed","getNodes_UNSTABLE","isModified","nodes","node","push","groupName","nodeKeys","map","prop","console","groupCollapsed","join","forEach","value","getLoadable","contents","info","key","groupEnd","DashedHeading","children","className","Flashcard","id","prompt","solution","Flashcards","flashcards","startQuiz","onClick","resourcePath","path","process","cleanString","s","trim","toLowerCase","replaceAll","isCorrect","flashcard","answer","remoteFlashcards","endpoint","parseResponse","compose","indexBy","default","selector","get","foo","bar","a","fetch","response","json","data","ok","identity","shuffle","sortBy","_x","Math","random","first","nth","getNextQuestion","quiz","questionIds","answers","unansweredQuestions","without","keys","currentQuizAtom","atom","currentQuizWithFlashcards","flashcardsById","questions","currentQuestion","currentQuestionId","assoc","currentQuizReport","errors","reduce","question","append","numberOfQuestions","length","score","makeLocalMutator","f","useRecoilState","setValue","args","apply","useNewQuizMutation","isFinished","make","useSubmitAnswerMutation","flashcardId","assocPath","useAdvanceToNextQuestionMutation","nextQuestion","useFinishQuizMutation","useCloseQuizMutation","Progress","report","color","contains","AnswerAndSolution","InlineIcon","mdiCheckBold","mdiCloseThick","QuestionReport","onNextQuestion","onFinishQuiz","Quiz","QuestionInput","onSubmit","useState","input","setInput","e","preventDefault","type","autoFocus","onBlur","target","focus","onChange","Questionaire","useRecoilValue","advanceToNextQuestion","submitAnswer","finishQuiz","submittedAnswer","ErrorLine","error","QuizReport","closeQuiz","num","denom","isEmpty","QuizComponent","Header","src","logo","alt","href","rel","App","currentQuiz","values","Spinner","AppLayout","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c05435a7.chunk.js","sourcesContent":["import { selector } from \"recoil\";\nimport { identity } from \"ramda\";\n\n/*\n * Uses the projects \"homepage\" attribute from package.json (\"/flowcards\") in\n * order to support Github Pages root URL being on ...github.io/flowcards/<asset>\n */\nexport const resourcePath = (path) => process.env.PUBLIC_URL + path;\n\nexport const createRemoteLoader = (loader) =>\n  selector({\n    key: loader.key,\n    default: {},\n    get: async (foo, bar) => {\n      const response = await fetch(resourcePath(loader.endpoint));\n      const data = await response.json();\n\n      if (response.ok) {\n        return (loader.parseResponse || identity)(data);\n      }\n      return loader.default;\n    },\n  });\n","import { useRecoilTransactionObserver_UNSTABLE } from \"recoil\";\nimport { map, join, prop } from \"ramda\";\n\n/*\n * A logger for in development logging every state change. Intentionally left on\n * for production builds for easy introspection.\n *\n * Recoil's abstraction makes it hard to show all state, since Selectors and\n * Atoms are all complected in this node generator pattern, you either see them\n * all or none. For now, only show the ones that have changed.\n */\nexport const DevLogger = () => {\n  useRecoilTransactionObserver_UNSTABLE(({ snapshot }) => {\n    const changed = snapshot.getNodes_UNSTABLE({ isModified: true });\n\n    // Nodes are a strange kind generators pattern. They can only be used in for\n    // loops, and can only be iterated once.\n    let nodes = [];\n    for (let node of changed) {\n      nodes.push(node);\n    }\n\n    const groupName = `%c CHANGES`;\n    const nodeKeys = map(prop(\"key\"), nodes);\n\n    console.groupCollapsed(\n      groupName,\n      \"color: #F59E0B; font-weight: bold\",\n      join(\", \", nodeKeys)\n    );\n\n    nodes.forEach((node) => {\n      const value = snapshot.getLoadable(node).contents;\n      console.info(\n        `%c ${node.key}`,\n        \"color: #EF4444; font-weight: bold\",\n        value\n      );\n    });\n\n    console.groupEnd(groupName);\n  });\n  return null;\n};\n","export default __webpack_public_path__ + \"static/media/logo.390ae3c8.svg\";","export const DashedHeading = ({ children }) => (\n  <>\n    <h1 className=\"font-bold text-xl mb-2 text-center\">{children}</h1>\n    <hr className=\"mb-4 border-2 border-dashed border-yellow-200\" />\n  </>\n);\n","import { map } from \"ramda\";\nimport { DashedHeading } from \"../Typography\";\n\nconst Flashcard = ({ id, prompt, solution }) => {\n  return (\n    <li className=\"mb-2 p-4 rounded bg-white\" key={id}>\n      <p className=\"font-bold\">{prompt}</p>\n      <p className=\"mt-1 italic text-gray-800\">{solution}</p>\n    </li>\n  );\n};\n\n/*\n * The component displaying all the user's flashcards meant for studying before\n * taking a quiz.\n */\nconst Flashcards = ({ flashcards, startQuiz }) => (\n  <div className=\"mt-4 animation-appear\">\n    <DashedHeading>Study your cards</DashedHeading>\n    <ul>{map(Flashcard, flashcards)}</ul>\n    <div className=\"text-center mt-4\">\n      <button className=\"btn btn--blue mx-auto\" onClick={startQuiz}>\n        Take a Quiz!\n      </button>\n    </div>\n  </div>\n);\n\nexport default Flashcards;\n","import { prop, compose, indexBy } from \"ramda\";\nimport { createRemoteLoader } from \"../remote/model\";\n\nconst cleanString = (s) =>\n  s\n    .trim()\n    .toLowerCase()\n    .replaceAll(/[^a-z0-9]/g, \"\");\n\n/*\n * Compares the flashcard solution against a (user inputted) answer. Only\n * alphanumeraical characters are compared in a case insensitive way, so it\n * will ignore and casing, whitespace or punctuation.\n */\nexport const isCorrect = (flashcard, answer) =>\n  cleanString(answer) === cleanString(flashcard.solution);\n\n/*\n * Loads the flashcards into a Recoil atom\n */\nexport const remoteFlashcards = createRemoteLoader({\n  key: \"userFlashCards\",\n  endpoint: \"/flashcards.json\",\n  // Function that picks the flashcards key from response, then indexes the list\n  // by their ID for easy access\n  parseResponse: compose(indexBy(prop(\"id\")), prop(\"flashcards\")),\n  default: {},\n});\n","import {\n  assoc,\n  assocPath,\n  sortBy,\n  compose,\n  map,\n  prop,\n  nth,\n  without,\n  keys,\n  reduce,\n  append,\n  path,\n  length,\n  apply,\n} from \"ramda\";\nimport { atom, selector, useRecoilState } from \"recoil\";\n\nimport { remoteFlashcards } from \"../flashcard/model\";\nimport * as Flashcard from \"../flashcard/model\";\n\nconst shuffle = sortBy((_x) => Math.random());\nconst first = nth(0);\n\n/*\n * Creates a new quiz from a list of flashcards. Questions will be shuffled.\n */\nexport const make = (flashcards) => {\n  const questionIds = compose(map(prop(\"id\")), shuffle)(flashcards);\n  return {\n    questionIds,\n    currentQuestionId: first(questionIds),\n    // A map from flashcard ID to user submitted answer.\n    answers: {},\n    isFinished: false,\n  };\n};\n\n/*\n * Sets the answer for the given flashcardId\n */\nexport const setAnswer = (quiz, flashcardId, answer) => {\n  return assocPath([\"answers\", flashcardId], answer, quiz);\n};\n\n/*\n * Returns the flashcard ID of the next unanaswered question.\n */\nexport const getNextQuestion = (quiz) => {\n  const { questionIds, answers } = quiz;\n  const unansweredQuestions = without(keys(answers), questionIds);\n  return first(unansweredQuestions);\n};\n\n/*\n * Sets the current question to the next unanswered question.\n */\nexport const advanceToNextQuestion = (quiz) => {\n  const nextQuestion = getNextQuestion(quiz);\n  return assoc(\"currentQuestionId\", nextQuestion, quiz);\n};\n\n/*\n * Sets the isFinished property. Useful to know in the UI when to display the\n * quiz overview. This should be done using routing, but since this app is so\n * small no routing implementation is available.\n */\nexport const finish = (quiz) => assoc(\"isFinished\", true, quiz);\n\n////////////////////////////////////////////////////////////////////////////////\n// Reads\n\n/*\n * The base quiz atom\n */\nexport const currentQuizAtom = atom({\n  key: \"currentQuiz\",\n});\n\n/*\n * The persisted quiz in the state only has a collection of ids for the\n * questions. This derivated selector picks those questions out of the app state\n * in order to create a rich quiz. Will add two keys: `questions` and\n * `currentQuestion` which will contain the flashcard found for the respective\n * ids of `questionIds` and `currentQuestionId`\n */\nexport const currentQuizWithFlashcards = selector({\n  key: \"currentQuizWithFlashcards\",\n  get: ({ get }) => {\n    const quiz = get(currentQuizAtom);\n    const flashcardsById = get(remoteFlashcards);\n    const questions = map((id) => prop(id, flashcardsById), quiz.questionIds);\n    const currentQuestion = prop(quiz.currentQuestionId, flashcardsById);\n\n    return compose(\n      assoc(\"questions\", questions),\n      assoc(\"currentQuestion\", currentQuestion)\n    )(quiz);\n  },\n});\n\n/*\n * Returns a quiz report containing the list of errors, modeled as a flashcard\n * with an extra key which is the users answer, and a score tuple of type\n * [nSuccess, nQuestions]\n */\nexport const currentQuizReport = selector({\n  key: \"currentQuizReport\",\n  get: ({ get }) => {\n    const quiz = get(currentQuizWithFlashcards);\n\n    const errors = reduce(\n      (errors, question) => {\n        const answer = path([\"answers\", question.id], quiz);\n        if (answer && Flashcard.isCorrect(question, answer)) {\n          return errors;\n        }\n        return append(assoc(\"answer\", answer, question), errors);\n      },\n      [],\n      quiz.questions\n    );\n\n    const numberOfQuestions = length(quiz.questions);\n\n    return {\n      errors,\n      score: [numberOfQuestions - length(errors), numberOfQuestions],\n    };\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////\n// Mutations\n\n/*\n * An abstraction around a hook that will use a recoil state to perform an\n * update transformation and persist it back. The mutator can receive any\n * arbitrary number of arguments. The update function should be of type:\n * f(oldValue, ...nArgs) -> newValue.\n *\n * This abstraction is generic and can be re-used if put in proper namespace.\n */\nconst makeLocalMutator = (atom, f) => () => {\n  const [value, setValue] = useRecoilState(atom);\n  return (...args) => setValue(apply(f, [value, ...args]));\n};\n\nexport const useNewQuizMutation = makeLocalMutator(\n  currentQuizAtom,\n  (quiz, flashcards) => make(flashcards)\n);\n\nexport const useSubmitAnswerMutation = makeLocalMutator(\n  currentQuizAtom,\n  setAnswer\n);\n\nexport const useAdvanceToNextQuestionMutation = makeLocalMutator(\n  currentQuizAtom,\n  advanceToNextQuestion\n);\n\nexport const useFinishQuizMutation = makeLocalMutator(currentQuizAtom, finish);\n\nexport const useCloseQuizMutation = makeLocalMutator(\n  currentQuizAtom,\n  () => null\n);\n","import { useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport Icon from \"@mdi/react\";\nimport { mdiCloseThick, mdiCheckBold } from \"@mdi/js\";\nimport { prop, path, map, contains } from \"ramda\";\n\nimport * as Quiz from \"./model\";\nimport * as Flashcard from \"../flashcard/model\";\n\n/*\n * The progress dots above the current question representing progression through\n * the quiz\n */\nconst Progress = ({ quiz, report }) => {\n  const Segment = (question) => {\n    const { id } = question;\n    let color;\n\n    // No recorded answer\n    if (!path([\"answers\", id], quiz)) {\n      color = \"bg-gray-200\";\n      // Answer was wrong!\n    } else if (contains(id, map(prop(\"id\"), report.errors))) {\n      color = \"bg-red-500\";\n      // Answer was correct\n    } else {\n      color = \"bg-green-500\";\n    }\n\n    return (\n      <span\n        key={id}\n        className={`inline-block w-4 h-4 mr-3 rounded-full ${color}`}\n      ></span>\n    );\n  };\n\n  return <div className=\"\">{map(Segment, quiz.questions)}</div>;\n};\n\n/*\n * Renders wether the answer was correct and the solution if not.\n */\nconst AnswerAndSolution = ({ flashcard, answer }) => {\n  const InlineIcon = ({ path, className }) => (\n    <Icon\n      className={`inline-block -mt-1 mr-2 w-5 h-5 ${className}`}\n      path={path}\n    />\n  );\n\n  if (Flashcard.isCorrect(flashcard, answer)) {\n    return (\n      <p>\n        <InlineIcon className=\"text-green-500\" path={mdiCheckBold} />\n        <span className=\"font-bold text-green-500\">Correct!</span>\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <p className=\"text-gray-700\">\n        <InlineIcon className=\"text-green-500\" path={mdiCheckBold} />\n        The correct answer was{\" \"}\n        <span className=\"font-bold text-green-500\"> {flashcard.solution} </span>\n      </p>\n\n      <p className=\"mt-2\">\n        <InlineIcon path={mdiCloseThick} className=\"text-red-500\" />\n        You replied <span className=\"font-bold text-red-500\">{answer}</span>\n      </p>\n    </>\n  );\n};\n\n/*\n * The page you see after submitting an answer to a questoin.\n */\nconst QuestionReport = ({\n  quiz,\n  flashcard,\n  answer,\n  onNextQuestion,\n  onFinishQuiz,\n}) => {\n  const nextQuestion = Quiz.getNextQuestion(quiz);\n\n  return (\n    <div className=\"mt-4\">\n      <AnswerAndSolution flashcard={flashcard} answer={answer} />\n      {nextQuestion ? (\n        <button\n          className=\"mt-4 underline text-blue-500 hover:text-blue-400\"\n          onClick={onNextQuestion}\n        >\n          Next Question →\n        </button>\n      ) : (\n        <button className=\"btn btn--blue mt-4\" onClick={onFinishQuiz}>\n          See how you've done!\n        </button>\n      )}\n    </div>\n  );\n};\n\n/*\n * The form collecting user input to respond to a question.\n */\nconst QuestionInput = ({ onSubmit }) => {\n  const [input, setInput] = useState(\"\");\n\n  return (\n    <>\n      <form\n        className=\"mt-8\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          if (input) onSubmit(input);\n        }}\n      >\n        <input\n          className=\"border-b-2 w-full outline-none border-gray-200 bg-gray-700 text-white rounded px-4 py-2 caret-gray-700 font-semibold\"\n          type=\"text\"\n          autoFocus={true}\n          onBlur={(e) => e.target.focus()}\n          onChange={(e) => setInput(e.target.value)}\n        />\n      </form>\n    </>\n  );\n};\n\n/*\n * The entire questionaire flow component.\n */\nconst Questionaire = () => {\n  const quiz = useRecoilValue(Quiz.currentQuizWithFlashcards);\n  const report = useRecoilValue(Quiz.currentQuizReport);\n  const advanceToNextQuestion = Quiz.useAdvanceToNextQuestionMutation();\n  const submitAnswer = Quiz.useSubmitAnswerMutation();\n  const finishQuiz = Quiz.useFinishQuizMutation();\n\n  const flashcard = quiz.currentQuestion;\n  const submittedAnswer = path([\"answers\", quiz.currentQuestionId], quiz);\n\n  // Probably need like an 'useRecoilUpdate' or somtething\n  return (\n    <div className=\"mt-8 p-8 bg-white rounded animation-appear\">\n      <Progress quiz={quiz} report={report} />\n      <h2 className=\"inline-block mt-8 font-bold text-xl border-l-4 pl-4 border-yellow-300\">\n        {quiz.currentQuestion.prompt}\n      </h2>\n      {submittedAnswer ? (\n        <QuestionReport\n          quiz={quiz}\n          flashcard={flashcard}\n          answer={submittedAnswer}\n          onNextQuestion={advanceToNextQuestion}\n          onFinishQuiz={finishQuiz}\n        />\n      ) : (\n        <QuestionInput\n          onSubmit={(answer) => submitAnswer(flashcard.id, answer)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Questionaire;\nexport { AnswerAndSolution };\n","import { map, isEmpty } from \"ramda\";\nimport { useRecoilValue } from \"recoil\";\n\nimport Questionaire from \"./Questionaire\";\nimport { AnswerAndSolution } from \"./Questionaire\";\nimport * as Quiz from \"./model\";\nimport { DashedHeading } from \"../Typography\";\n\n/*\n * Displays a mistake the user made during the quiz on the final report.\n */\nconst ErrorLine = (error) => {\n  return (\n    <li key={error.id} className=\"mt-6 border-l-4 pl-4 border-yellow-300\">\n      <h2 className=\"text-xl font-bold\">{error.prompt}</h2>\n      <div className=\"mt-2\">\n        <AnswerAndSolution flashcard={error} answer={error.answer} />\n      </div>\n    </li>\n  );\n};\n\n/*\n * After completing a quiz renders the score and any errors made.\n */\nconst QuizReport = () => {\n  const report = useRecoilValue(Quiz.currentQuizReport);\n  const closeQuiz = Quiz.useCloseQuizMutation();\n  const [num, denom] = report.score;\n\n  return (\n    <div className=\"mt-8 p-8 bg-white rounded animation-appear\">\n      <h1 className=\"font-bold text-xl\">All done!</h1>\n      <p className=\"mt-4 text-gray-800\">\n        You have finished the quiz. Your score was{\" \"}\n        <span className=\"font-bold\">{num}</span> out of{\" \"}\n        <span className=\"font-bold\">{denom}</span>!\n      </p>\n      {isEmpty(report.errors) ? (\n        <p className=\"mt-2 font-bold text-green-500\">\n          You didn't make a single mistake!\n        </p>\n      ) : (\n        <ul className=\"mt-2\">{map(ErrorLine, report.errors)}</ul>\n      )}\n      <button\n        className=\"mt-4 underline text-blue-500 hover:text-blue-400\"\n        onClick={closeQuiz}\n      >\n        ← Go back\n      </button>\n    </div>\n  );\n};\n\n/*\n * The main quiz component with questionnaire and report.\n */\nconst QuizComponent = () => {\n  const quiz = useRecoilValue(Quiz.currentQuizAtom);\n\n  return quiz.isFinished ? (\n    <>\n      <DashedHeading>See your results</DashedHeading>\n      <QuizReport />\n    </>\n  ) : (\n    <>\n      <DashedHeading>Take the quiz</DashedHeading>\n      <Questionaire />;\n    </>\n  );\n};\n\nexport default QuizComponent;\n","import { Suspense } from \"react\";\nimport { values } from \"ramda\";\nimport { useRecoilValue } from \"recoil\";\n\nimport logo from \"./logo.svg\";\nimport FlashcardsOverview from \"./flashcard/Overview\";\nimport { remoteFlashcards } from \"./flashcard/model\";\nimport { currentQuizAtom, useNewQuizMutation } from \"./quiz/model\";\nimport Quiz from \"./quiz/Quiz\";\nimport { resourcePath } from \"./remote/model\";\n\nconst Header = () => {\n  return (\n    <div className=\"flex items-center flex-col sm:flex-row sm:justify-between py-4 sm:mb-4\">\n      <div className=\"flex items-center\">\n        <img className=\"w-8 h-8\" src={logo} alt={\"Flowcards Logo\"} />\n        <span className=\"ml-2 font-bold text-2xl\">FlowCards</span>\n      </div>\n      <a\n        href=\"https://www.github.com/yannvanhalewyn/flowcards\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className=\"mt-4 sm:mt-0 px-4 py-1 rounded shadow bg-white hover:bg-gray-100\"\n      >\n        <span className=\"text-sm\">View source on</span>\n        <img\n          className=\"inline h-6 w-6 ml-2\"\n          src={resourcePath(\"/img/github-logo.png\")}\n          alt=\"Github Logo\"\n        />\n      </a>\n    </div>\n  );\n};\n\n/*\n * A nested component so that we can wrap this part of the app in a Suspense\n * block in the App component\n */\nconst App = () => {\n  // Load flashcards into appstate when component mounts\n  const flashcardsById = useRecoilValue(remoteFlashcards);\n  const currentQuiz = useRecoilValue(currentQuizAtom);\n  const startQuiz = useNewQuizMutation();\n\n  return currentQuiz ? (\n    <Quiz />\n  ) : (\n    <FlashcardsOverview\n      flashcards={values(flashcardsById)}\n      startQuiz={() => startQuiz(values(flashcardsById))}\n    />\n  );\n};\n\nconst Spinner = () => <div>Loading...</div>;\n\nconst AppLayout = () => {\n  return (\n    <div className=\"px-4 pb-4 max-w-4xl mx-auto\">\n      <Header />\n      <Suspense fallback={<Spinner />}>\n        <App />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default AppLayout;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { DevLogger } from \"./dev/logger\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <DevLogger />\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}